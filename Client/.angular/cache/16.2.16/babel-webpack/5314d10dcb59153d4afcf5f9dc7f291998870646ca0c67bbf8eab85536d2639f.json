{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ShiftEmployeeComponent = class ShiftEmployeeComponent {\n  constructor(svc) {\n    this.svc = svc;\n    this.shifEmp = [];\n    this.dateWiseOTime = [];\n    this.Form = {\n      shiftEmployeeID: '',\n      fromDate: '',\n      toDate: '',\n      dateWiseOfficeTimeID: ''\n    };\n    this.isEdit = false;\n  }\n  ngOnInit() {\n    this.getAll();\n    this.loadDWiseOffice();\n  }\n  getAll() {\n    this.svc.getAll().subscribe(data => {\n      this.shifEmp = data;\n      const maxId = this.shifEmp.reduce((max, item) => {\n        const num = parseInt(item.shiftEmployeeID.replace('SE', ''), 10);\n        return isNaN(num) ? max : Math.max(max, num);\n      }, 0);\n      const nextId = `SE${(maxId + 1).toString().padStart(3, '0')}`;\n      this.Form.shiftEmployeeID = nextId;\n    });\n  }\n  loadDWiseOffice() {\n    this.svc.getdateWiseOfficeTime().subscribe({\n      next: data => {\n        this.dateWiseOTime = data;\n      },\n      error: err => {\n        console.error('Failed to load employees', err);\n      }\n    });\n  }\n  onSubmit() {\n    if (this.isEdit) {\n      this.svc.update(this.Form.shiftEmployeeID, this.Form).subscribe(() => {\n        this.getAll();\n        this.resetForm();\n      });\n    } else {\n      const newItem = {\n        ...this.Form,\n        id: crypto.randomUUID()\n      };\n      this.svc.create(newItem).subscribe(() => {\n        this.getAll();\n        this.resetForm();\n      });\n    }\n  }\n  editItem(item) {\n    this.Form = {\n      ...item\n    };\n    this.isEdit = true;\n  }\n  deleteItem(id) {\n    if (confirm('Are you sure to delete?')) {\n      this.svc.delete(id).subscribe(() => this.getAll());\n    }\n  }\n  resetForm() {\n    this.Form = {\n      shiftEmployeeID: '',\n      fromDate: '',\n      toDate: '',\n      dateWiseOfficeTimeID: ''\n    };\n    this.isEdit = false;\n  }\n};\nShiftEmployeeComponent = __decorate([Component({\n  selector: 'app-shift-employee',\n  templateUrl: './shift-employee.component.html',\n  styleUrls: ['./shift-employee.component.css']\n})], ShiftEmployeeComponent);","map":{"version":3,"names":["Component","ShiftEmployeeComponent","constructor","svc","shifEmp","dateWiseOTime","Form","shiftEmployeeID","fromDate","toDate","dateWiseOfficeTimeID","isEdit","ngOnInit","getAll","loadDWiseOffice","subscribe","data","maxId","reduce","max","item","num","parseInt","replace","isNaN","Math","nextId","toString","padStart","getdateWiseOfficeTime","next","error","err","console","onSubmit","update","resetForm","newItem","id","crypto","randomUUID","create","editItem","deleteItem","confirm","delete","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\HomePC\\Desktop\\HRIS\\HRIS\\Client\\src\\app\\components\\shift-employee\\shift-employee.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ShiftEmployee } from 'src/app/models/shift-employee';\r\nimport { DateWiseOfficeTime, ShiftEmployeeService } from 'src/app/services/shift-employee.service';\r\n\r\n@Component({\r\n  selector: 'app-shift-employee',\r\n  templateUrl: './shift-employee.component.html',\r\n  styleUrls: ['./shift-employee.component.css']\r\n})\r\nexport class ShiftEmployeeComponent implements OnInit{\r\n\r\n  shifEmp: ShiftEmployee[] = [];\r\n  dateWiseOTime: DateWiseOfficeTime[] = [];\r\n\r\n         Form: ShiftEmployee = { shiftEmployeeID: '', fromDate:'', toDate: '',dateWiseOfficeTimeID:''};\r\n         isEdit: boolean = false;\r\n       \r\n          constructor(private svc: ShiftEmployeeService) {}\r\n       \r\n         ngOnInit(): void {\r\n           this.getAll();\r\n           this.loadDWiseOffice();\r\n         }\r\n       \r\n           getAll(): void {\r\n     this.svc.getAll().subscribe(data => {\r\n       this.shifEmp = data;\r\n   \r\n   \r\n       const maxId = this.shifEmp.reduce((max, item) => {\r\n         const num = parseInt(item.shiftEmployeeID!.replace('SE', ''), 10);\r\n         return isNaN(num) ? max : Math.max(max, num);\r\n       }, 0);\r\n   \r\n   \r\n       const nextId = `SE${(maxId + 1).toString().padStart(3, '0')}`;\r\n       this.Form.shiftEmployeeID = nextId;\r\n     });\r\n  }\r\n  \r\n  loadDWiseOffice() {\r\n    this.svc.getdateWiseOfficeTime().subscribe({\r\n      next: (data) => {\r\n        this.dateWiseOTime = data;\r\n      },\r\n      error: (err) => {\r\n        console.error('Failed to load employees', err);\r\n      }\r\n    });\r\n  }\r\n   \r\n       \r\n          onSubmit(): void {\r\n           if (this.isEdit) {\r\n             this.svc.update(this.Form.shiftEmployeeID!, this.Form).subscribe(() => {\r\n               this.getAll();\r\n               this.resetForm();\r\n             });\r\n           } else {\r\n             const newItem = { ...this.Form, id: crypto.randomUUID() }; \r\n             this.svc.create(newItem).subscribe(() => {\r\n               this.getAll();\r\n               this.resetForm();\r\n             });\r\n           }\r\n         }\r\n       \r\n           editItem(item: ShiftEmployee): void {\r\n           this.Form = { ...item };\r\n           this.isEdit = true;\r\n         }\r\n       \r\n         deleteItem(id: string): void {\r\n           if (confirm('Are you sure to delete?')) {\r\n             this.svc.delete(id).subscribe(() => this.getAll());\r\n           }\r\n         }\r\n       \r\n         resetForm(): void {\r\n           this.Form = {shiftEmployeeID: '', fromDate:'', toDate: '',dateWiseOfficeTimeID:''};\r\n           this.isEdit = false;\r\n         }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAS1C,WAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAQzBC,YAAoBC,GAAyB;IAAzB,KAAAA,GAAG,GAAHA,GAAG;IAN/B,KAAAC,OAAO,GAAoB,EAAE;IAC7B,KAAAC,aAAa,GAAyB,EAAE;IAEjC,KAAAC,IAAI,GAAkB;MAAEC,eAAe,EAAE,EAAE;MAAEC,QAAQ,EAAC,EAAE;MAAEC,MAAM,EAAE,EAAE;MAACC,oBAAoB,EAAC;IAAE,CAAC;IAC7F,KAAAC,MAAM,GAAY,KAAK;EAE0B;EAEjDC,QAAQA,CAAA;IACN,IAAI,CAACC,MAAM,EAAE;IACb,IAAI,CAACC,eAAe,EAAE;EACxB;EAEED,MAAMA,CAAA;IACZ,IAAI,CAACV,GAAG,CAACU,MAAM,EAAE,CAACE,SAAS,CAACC,IAAI,IAAG;MACjC,IAAI,CAACZ,OAAO,GAAGY,IAAI;MAGnB,MAAMC,KAAK,GAAG,IAAI,CAACb,OAAO,CAACc,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAI;QAC9C,MAAMC,GAAG,GAAGC,QAAQ,CAACF,IAAI,CAACb,eAAgB,CAACgB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;QACjE,OAAOC,KAAK,CAACH,GAAG,CAAC,GAAGF,GAAG,GAAGM,IAAI,CAACN,GAAG,CAACA,GAAG,EAAEE,GAAG,CAAC;MAC9C,CAAC,EAAE,CAAC,CAAC;MAGL,MAAMK,MAAM,GAAG,KAAK,CAACT,KAAK,GAAG,CAAC,EAAEU,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MAC7D,IAAI,CAACtB,IAAI,CAACC,eAAe,GAAGmB,MAAM;IACpC,CAAC,CAAC;EACL;EAEAZ,eAAeA,CAAA;IACb,IAAI,CAACX,GAAG,CAAC0B,qBAAqB,EAAE,CAACd,SAAS,CAAC;MACzCe,IAAI,EAAGd,IAAI,IAAI;QACb,IAAI,CAACX,aAAa,GAAGW,IAAI;MAC3B,CAAC;MACDe,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAAC,0BAA0B,EAAEC,GAAG,CAAC;MAChD;KACD,CAAC;EACJ;EAGQE,QAAQA,CAAA;IACP,IAAI,IAAI,CAACvB,MAAM,EAAE;MACf,IAAI,CAACR,GAAG,CAACgC,MAAM,CAAC,IAAI,CAAC7B,IAAI,CAACC,eAAgB,EAAE,IAAI,CAACD,IAAI,CAAC,CAACS,SAAS,CAAC,MAAK;QACpE,IAAI,CAACF,MAAM,EAAE;QACb,IAAI,CAACuB,SAAS,EAAE;MAClB,CAAC,CAAC;KACH,MAAM;MACL,MAAMC,OAAO,GAAG;QAAE,GAAG,IAAI,CAAC/B,IAAI;QAAEgC,EAAE,EAAEC,MAAM,CAACC,UAAU;MAAE,CAAE;MACzD,IAAI,CAACrC,GAAG,CAACsC,MAAM,CAACJ,OAAO,CAAC,CAACtB,SAAS,CAAC,MAAK;QACtC,IAAI,CAACF,MAAM,EAAE;QACb,IAAI,CAACuB,SAAS,EAAE;MAClB,CAAC,CAAC;;EAEN;EAEEM,QAAQA,CAACtB,IAAmB;IAC5B,IAAI,CAACd,IAAI,GAAG;MAAE,GAAGc;IAAI,CAAE;IACvB,IAAI,CAACT,MAAM,GAAG,IAAI;EACpB;EAEAgC,UAAUA,CAACL,EAAU;IACnB,IAAIM,OAAO,CAAC,yBAAyB,CAAC,EAAE;MACtC,IAAI,CAACzC,GAAG,CAAC0C,MAAM,CAACP,EAAE,CAAC,CAACvB,SAAS,CAAC,MAAM,IAAI,CAACF,MAAM,EAAE,CAAC;;EAEtD;EAEAuB,SAASA,CAAA;IACP,IAAI,CAAC9B,IAAI,GAAG;MAACC,eAAe,EAAE,EAAE;MAAEC,QAAQ,EAAC,EAAE;MAAEC,MAAM,EAAE,EAAE;MAACC,oBAAoB,EAAC;IAAE,CAAC;IAClF,IAAI,CAACC,MAAM,GAAG,KAAK;EACrB;CACR;AAzEYV,sBAAsB,GAAA6C,UAAA,EALlC9C,SAAS,CAAC;EACT+C,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,C,EACWhD,sBAAsB,CAyElC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}